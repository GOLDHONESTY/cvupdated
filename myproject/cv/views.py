from django.shortcuts import render, redirect
from .models import Personcv
from django.contrib.auth.models import User, auth
from django.contrib import messages
from django.contrib.auth.decorators import login_required
import pdfkit
from django.http import HttpResponse
from django.template import loader
import io



# Create your views here.
@login_required
def index(request):
    return render(request, 'cv/index.html')

# def process_tasks(tasks):
#     for task in tasks:
#         return task.replace('\r\n', '<br>')
    


# def see(request,id):
#     personcvs = Personcv.objects.get(id=id)
    
#     personcvs.combined_data_qualification = list(
#         zip(
#             [item for item in personcvs.coursestudy if item.strip()], 
#             [item for item in personcvs.qualificationin if item.strip()], 
#             [item for item in personcvs.yearcomploted if item.strip()]
#         )
#     )
#     personcvs.combined_datas_institution = list(
#         zip(
#             [item for item in personcvs.institution if item.strip()], 
#             [item for item in personcvs.qualification if item.strip()], 
#             [item for item in personcvs.instituteyear if item.strip()]
#         )
#     )

#     personcvs.combined_data_work_experience = list(
#         zip(
#             [item for item in personcvs.organizationname if item.strip()],
#             [item for item in personcvs.organizationaddress if item.strip()],
#             [item for item in personcvs.Position if item.strip()],
#             [item for item in personcvs.dailytask if item.strip()],
#             [item for item in personcvs.yearfrom if item.strip()],
#             [item for item in personcvs.yearto if item.strip()]
#         )
#     )

#     personcvs.combine_data_project = list(
#         zip(
#             [items for items in personcvs.projecttitle if items.strip()],
#             [items for items in personcvs.projectdate if items.strip()],
#             [items for items in personcvs.projectrole if items.strip()],
#             [items for items in personcvs.ProjectDescription if items.strip()]
#         )
#     )

#     personcvs.combine_data_certification = list(
#         zip(
#             [item for item in personcvs.nameofcertification if item.strip()],
#             [item for item in personcvs.dateofcertification if item.strip()]
#         )
#     )

#     personcvs.combine_data_reference = list(
#         zip(
#             [item for item in personcvs.refereename if item.strip()],
#             [item for item in personcvs.refereetitle if item.strip()],
#             [item for item in personcvs.refereeorganization if item.strip()],
#             [item for item in personcvs.refereeaddress if item.strip()],
#             [item for item in personcvs.referee_email if item.strip()]
#             )
#     )


    
    # for personcv in personcvs:

    # template = loader.get_template('cv/see.html')

    # context= {'personcvs':personcvs}
    # html = template.render(context)
    # options = {
    #     'page-size': 'A4',
    #     'margin-top': '0.1in',
    #     'margin-right': '0.1in',
    #     'margin-bottom': '0.75in',
    #     'margin-left': '0.1in',
    #     'encoding': "UTF-8",
    #     # 'custom-header': [
    #     #     ('Author', 'My CV Generator'),
    #     #     ('Title', 'My CV'),
    #     # ],
    #     # 'footer-right': '[page] of [toPage]',
    #     # 'footer-left': 'Generated by My CV Generator',
    # }
    # pdf = pdfkit.from_string(html, False, options)
    # response = HttpResponse(pdf, content_type='application/pdf')
    # response['Content-Disposition'] = 'attachment;'
    # filename = "my_cv.pdf"
    # return response

@login_required
def resu(request, id):
    personcvs = Personcv.objects.get(id=id)

    personcvs.combined_data_qualification = list(
        zip(
            [item for item in personcvs.coursestudy if item.strip()], 
            [item for item in personcvs.qualificationin if item.strip()], 
            [item for item in personcvs.yearcomploted if item.strip()]
        )
    )
    personcvs.combined_datas_institution = list(
        zip(
            [item for item in personcvs.institution if item.strip()], 
            [item for item in personcvs.qualification if item.strip()], 
            [item for item in personcvs.instituteyear if item.strip()]
        )
    )

    personcvs.combined_data_work_experience = list(
        zip(
            [item for item in personcvs.organizationname if item.strip()],
            [item for item in personcvs.organizationaddress if item.strip()],
            [item for item in personcvs.Position if item.strip()],
            [item for item in personcvs.dailytask if item.strip()],
            [item for item in personcvs.yearfrom if item.strip()],
            [item for item in personcvs.yearto if item.strip()]
        )
    )

    personcvs.combine_data_project = list(
        zip(
            [items for items in personcvs.projecttitle if items.strip()],
            [items for items in personcvs.projectdate if items.strip()],
            [items for items in personcvs.projectrole if items.strip()],
            [items for items in personcvs.ProjectDescription if items.strip()]
        )
    )

    personcvs.combine_data_certification = list(
        zip(
            [item for item in personcvs.nameofcertification if item.strip()],
            [item for item in personcvs.dateofcertification if item.strip()]
        )
    )

    personcvs.combine_data_reference = list(
        zip(
            [item for item in personcvs.refereename if item.strip()],
            [item for item in personcvs.refereetitle if item.strip()],
            [item for item in personcvs.refereeorganization if item.strip()],
            [item for item in personcvs.refereeaddress if item.strip()],
            [item for item in personcvs.referee_email if item.strip()]
            )
    )
    


    # context= {'personcvs':personcvs,}
    # return render(request, 'cv/resu.html',context)

    template = loader.get_template('cv/resu.html')

    context= {'personcvs':personcvs}
    html = template.render(context)
    options = {
        'page-size': 'A4',
        'margin-top': '0.5in',
        'margin-right': '0.1in',
        'margin-bottom': '0.75in',
        'margin-left': '0.1in',
        'encoding': "UTF-8",
        # 'custom-header': [
        #     ('Author', 'My CV Generator'),
        #     ('Title', 'My CV'),
        # ],
        # 'footer-right': '[page] of [toPage]',
        # 'footer-left': 'Generated by My CV Generator',
    }
    pdf = pdfkit.from_string(html, False, options)
    response = HttpResponse(pdf, content_type='application/pdf')
    response['Content-Disposition'] = 'attachment;'
    filename = "my_cv.pdf"
    return response

    

    
   




@login_required
def resu2(request, id):
    personcvs = Personcv.objects.get(id=id)

    personcvs.combined_data_qualification = list(
        zip(
            [item for item in personcvs.coursestudy if item.strip()], 
            [item for item in personcvs.qualificationin if item.strip()], 
            [item for item in personcvs.yearcomploted if item.strip()]
        )
    )
    personcvs.combined_datas_institution = list(
        zip(
            [item for item in personcvs.institution if item.strip()], 
            [item for item in personcvs.qualification if item.strip()], 
            [item for item in personcvs.instituteyear if item.strip()]
        )
    )

    personcvs.combined_data_work_experience = list(
        zip(
            [item for item in personcvs.organizationname if item.strip()],
            [item for item in personcvs.organizationaddress if item.strip()],
            [item for item in personcvs.Position if item.strip()],
            [item for item in personcvs.dailytask if item.strip()],
            [item for item in personcvs.yearfrom if item.strip()],
            [item for item in personcvs.yearto if item.strip()]
        )
    )

    personcvs.combine_data_project = list(
        zip(
            [items for items in personcvs.projecttitle if items.strip()],
            [items for items in personcvs.projectdate if items.strip()],
            [items for items in personcvs.projectrole if items.strip()],
            [items for items in personcvs.ProjectDescription if items.strip()]
        )
    )

    personcvs.combine_data_certification = list(
        zip(
            [item for item in personcvs.nameofcertification if item.strip()],
            [item for item in personcvs.dateofcertification if item.strip()]
        )
    )

    personcvs.combine_data_reference = list(
        zip(
            [item for item in personcvs.refereename if item.strip()],
            [item for item in personcvs.refereetitle if item.strip()],
            [item for item in personcvs.refereeorganization if item.strip()],
            [item for item in personcvs.refereeaddress if item.strip()],
            [item for item in personcvs.referee_email if item.strip()]
            )
    )

    template = loader.get_template('cv/resu2.html')

    context= {'personcvs':personcvs}
    html = template.render(context)
    options = {
        'page-size': 'A4',
        'margin-top': '0.1in',
        'margin-right': '0.1in',
        'margin-bottom': '0.75in',
        'margin-left': '0.1in',
        'encoding': "UTF-8",
    }
    pdf = pdfkit.from_string(html, False, options)
    response = HttpResponse(pdf, content_type='application/pdf')
    response['Content-Disposition'] = 'attachment;'
    filename = "my_cv.pdf"
    return response

    # context ={
    #     'personcvs':personcvs
    # }
    # return render(request, 'cv/resu2.html',context)


@login_required
def resu3(request, id):
    personcvs = Personcv.objects.get(id=id)

    personcvs.combined_data_qualification = list(
        zip(
            [item for item in personcvs.coursestudy if item.strip()], 
            [item for item in personcvs.qualificationin if item.strip()], 
            [item for item in personcvs.yearcomploted if item.strip()]
        )
    )
    personcvs.combined_datas_institution = list(
        zip(
            [item for item in personcvs.institution if item.strip()], 
            [item for item in personcvs.qualification if item.strip()], 
            [item for item in personcvs.instituteyear if item.strip()]
        )
    )

    personcvs.combined_data_work_experience = list(
        zip(
            [item for item in personcvs.organizationname if item.strip()],
            [item for item in personcvs.organizationaddress if item.strip()],
            [item for item in personcvs.Position if item.strip()],
            [item for item in personcvs.dailytask if item.strip()],
            [item for item in personcvs.yearfrom if item.strip()],
            [item for item in personcvs.yearto if item.strip()]
        )
    )

    personcvs.combine_data_project = list(
        zip(
            [items for items in personcvs.projecttitle if items.strip()],
            [items for items in personcvs.projectdate if items.strip()],
            [items for items in personcvs.projectrole if items.strip()],
            [items for items in personcvs.ProjectDescription if items.strip()]
        )
    )

    personcvs.combine_data_certification = list(
        zip(
            [item for item in personcvs.nameofcertification if item.strip()],
            [item for item in personcvs.dateofcertification if item.strip()]
        )
    )

    personcvs.combine_data_reference = list(
        zip(
            [item for item in personcvs.refereename if item.strip()],
            [item for item in personcvs.refereetitle if item.strip()],
            [item for item in personcvs.refereeorganization if item.strip()],
            [item for item in personcvs.refereeaddress if item.strip()],
            [item for item in personcvs.referee_email if item.strip()]
            )
    )

    # context ={
    #     'personcvs':personcvs
    # }
    # return render(request, 'cv/resu3.html',context)

    template = loader.get_template('cv/resu3.html')

    context= {'personcvs':personcvs}
    html = template.render(context)
    options = {
        'page-size': 'A4',
        'margin-top': '0.1in',
        'margin-right': '0.1in',
        'margin-bottom': '0.75in',
        'margin-left': '0.1in',
        'encoding': "UTF-8",
    }
    pdf = pdfkit.from_string(html, False, options)
    response = HttpResponse(pdf, content_type='application/pdf')
    response['Content-Disposition'] = 'attachment;'
    filename = "my_cv.pdf"
    return response

@login_required
def cvdownload(request):
    personcvs = Personcv.objects.order_by('id').last()
    context = {'personcvs': personcvs}

    return render(request, 'cv/cvdownload.html', context)


@login_required
def cvregister(request):

    if request.method == 'POST':
   
        # person details
        fullname = request.POST.get('fullname')
        dateofbirth = request.POST.get('dateofbirth')
        sex = request.POST.get('sex')
        state = request.POST.get('state')
        lga = request.POST.get('lga')
        maritalstatus = request.POST.get('maritalstatus')
        address = request.POST.get('address')
        phonenumber = request.POST.get('phonenumber')
        cvemail = request.POST.get('cvemail')
        
        #INSTITUTION ATTENDED
        institution = request.POST.getlist('institution[]')
        qualification = request.POST.getlist('qualification[]')
        instituteyear = request.POST.getlist('instituteyear[]')
        
        #QUALIFICATION OBTAINED
        coursestudy = request.POST.getlist('coursestudy[]')
        qualificationin = request.POST.getlist('qualificationin[]')
        yearcomploted = request.POST.getlist('yearcomploted[]')
        
        
        #WORK EXPERIENCE
        organizationname = request.POST.getlist('organizationname[]')
        organizationaddress = request.POST.getlist('organizationaddress[]')
        Position = request.POST.getlist('Position[]')
        dailytask = request.POST.getlist('dailytask[]')
        yearfrom = request.POST.getlist('yearfrom[]')
        yearto = request.POST.getlist('yearto[]')
        
        #PROJECT
        projecttitle = request.POST.getlist('projecttitle[]')
        projectdate = request.POST.getlist('projectdate[]')
        projectrole = request.POST.getlist('projectrole[]')
        ProjectDescription = request.POST.getlist('ProjectDescription[]')
        
        
        #CERTIFICATION OBTAINED WITH DATE
        nameofcertification = request.POST.getlist('nameofcertification[]')
        dateofcertification = request.POST.getlist('dateofcertification[]')
        
        #SKILLS
        skills = request.POST.getlist('skills[]')
        
        #languages
        languages = request.POST.getlist('languages[]')
        
        #HOBBIES
        hobbies = request.POST.getlist('hobbies[]')
        
        #REFERENCES
        refereename = request.POST.getlist('refereename[]')
        refereetitle = request.POST.getlist('refereetitle[]')
        refereeorganization = request.POST.getlist('refereeorganization[]')
        refereeaddress = request.POST.getlist('refereeaddress[]')
        referee_email = request.POST.getlist('referee_email[]')
        
    
        
        # ====================================================
        
        personcv = Personcv(
        user = request.user,
        # person details
        fullname = fullname,
        dateofbirth = dateofbirth,
        sex = sex,
        state = state,
        lga = lga,
        maritalstatus = maritalstatus,
        address = address,
        phonenumber = phonenumber,
        cvemail = cvemail,
        
        #INSTITUTION ATTENDED
        institution = institution,
        qualification = qualification,
        instituteyear = instituteyear,
        
        #QUALIFICATION OBTAINED
        coursestudy = coursestudy,
        qualificationin = qualificationin,
        yearcomploted = yearcomploted,
        
        
        #WORK EXPERIENCE
        organizationname = organizationname,
        organizationaddress = organizationaddress,
        Position = Position,
        dailytask = dailytask,
        yearfrom = yearfrom,
        yearto = yearto,
        
        #PROJECT
        projecttitle = projecttitle,
        projectdate = projectdate,
        projectrole = projectrole,
        ProjectDescription = ProjectDescription,
        
        
        #CERTIFICATION OBTAINED WITH DATE
        nameofcertification = nameofcertification,
        dateofcertification = dateofcertification,
        
        #SKILLS
        skills = skills,
        
        #languages
        languages = languages,
        
        #HOBBIES
        hobbies = hobbies,
        
        #REFERENCES
        refereename = refereename,
        refereetitle = refereetitle,
        refereeorganization = refereeorganization,
        refereeaddress = refereeaddress,
        referee_email = referee_email)
        
        personcv.save()
        return redirect('cvdownload')
    else:
        return render(request, 'cv/cvregister.html')


def register(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        email = request.POST.get('email')
        password = request.POST.get('password')
        password2 = request.POST.get('password2')

        if password == password2:
            if User.objects.filter(email=email).exists():
                messages.info(request, 'email already exist')
                return redirect('register')
            elif User.objects.filter(username=username).exists():
                messages.info(request, 'email already exist')
                return redirect('register')
            else:
                user = User.objects.create_user(username=username, email=email, password=password)
                user.save()
                return redirect('login')
        else:
            messages.info(request, 'passord not thesame')
            return redirect('register')
    return render(request, 'cv/register.html')


def login(request):
    
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        user = auth.authenticate(username=username, password=password)
        if user is not None:
            auth.login(request, user)
            return redirect('index')
        else:
            messages.info(request, 'Invalid credentials try signing up')
            return redirect('login')

    return render(request, 'cv/login.html')



def logout(request):
    auth.logout(request)
    return redirect('login')







